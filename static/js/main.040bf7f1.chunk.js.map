{"version":3,"sources":["components/Table/Table.jsx","App.js","serviceWorker.js","index.js"],"names":["Table","state","activeDrags","isDragged","rewardBox","deleteBox","onStart","newDrag","setState","onStop","handleSelect","e","console","log","r","newRewards","this","push","idx","updateRewards","deleted","length","pop","dragHandlers","className","map","key","id","onMouseDown","addReward","axis","title","onClick","deleteReward","c","undoReward","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0UA2HeA,E,4MAnHXC,MAAQ,CACJC,YAAa,EACbC,WAAW,EACXC,UAAW,GACXC,UAAW,I,EAIfC,QAAU,WACN,IAAIC,EAAU,EAAKN,MAAMC,YACzB,EAAKM,SAAS,CAAEN,cAAeK,EAASJ,WAAW,K,EAGvDM,OAAS,WACL,IAAIF,EAAU,EAAKN,MAAMC,YACzB,EAAKM,SAAS,CAAEN,cAAeK,EAASJ,WAAW,K,EAgCvDO,aAAe,SAACC,GACZC,QAAQC,IAAI,O,wDA9BNC,GACN,IAAIC,EAAaC,KAAKf,MAAMG,UAC5BW,EAAWE,KAAKH,GAChBE,KAAKR,SAAS,CAAEJ,UAAWW,EAAYZ,WAAW,M,mCAGzCW,EAAGI,GACZ,IAAIC,EAAgBH,KAAKf,MAAMG,UAC3BgB,EAAUJ,KAAKf,MAAMI,UACzBe,EAAQH,KAAKH,GACbK,EAAcD,GAAO,GAErBF,KAAKR,SAAS,CAAEJ,UAAWe,EAAgBd,UAAWe,M,mCAItD,IAAID,EAAgBH,KAAKf,MAAMG,UAC3BgB,EAAUJ,KAAKf,MAAMI,UAE6B,KAAnDc,EAAcH,KAAKf,MAAMG,UAAUiB,OAAS,IAC3CF,EAAcH,KAAKf,MAAMG,UAAUiB,OAAS,GAAKD,EAAQA,EAAQC,OAAS,GAC1ED,EAAQE,OAERH,EAAcG,MAGlBN,KAAKR,SAAS,CAACJ,UAAWe,EAAed,UAAWe,M,+BAS9C,IAAD,OAGCG,EAAe,CAACjB,QAASU,KAAKV,QAASG,OAAQO,KAAKP,QAE1D,OAEI,yBAAKe,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YAAf,UAGA,yBAAKA,UAAU,aAAf,eAMJ,yBAAKA,UAAU,OAEX,yBAAKA,UAAS,mBAAcR,KAAKf,MAAME,UAAY,SAAW,KAA9D,QAnBI,CAAC,KAAM,KAAM,KAAM,KAAM,MAqBhBsB,KAAI,SAACX,EAAGI,GAAJ,OAGb,yBAAKQ,IAAKR,EAAKM,UAAU,aAAaG,GAAIb,EAAGc,YAAa,kBAAM,EAAKC,UAAUf,KAC1EA,OAST,yBAAKU,UAAS,2BAAsBR,KAAKf,MAAME,UAAY,GAAK,WAC3Da,KAAKf,MAAMG,UAAUqB,KAAI,SAACX,EAAGI,GAAJ,OACtB,kBAAC,IAAD,eAAWQ,IAAKR,EAAKY,KAAK,KAAQP,GAC9B,yBAAKC,UAAS,qBAAsB,KAANV,EAAW,OAAS,KAC9C,4BAAQU,UAAU,6CAA6CO,MAAM,gBAAgBC,QAAS,kBAAM,EAAKC,aAAanB,EAAGI,KAAM,uBAAGM,UAAU,kBAC3IV,QAtCV,CAAC,KAAM,KAAM,KAAM,KAAM,MA6CpBW,KAAI,SAACS,EAAGhB,GAAJ,OACZ,yBAAKM,UAAU,WAAWE,IAAKR,GAC3B,0BAAMM,UAAU,UAAUU,QAKtC,4BAAQV,UAAU,8BAA8BO,MAAM,gBAAgBC,QAAS,kBAAM,EAAKG,eAA1F,a,GA5GIC,aCWLC,E,uKATX,OACE,yBAAKb,UAAU,OACb,4BAAQA,UAAU,cAAlB,0BACA,kBAAC,EAAD,W,GALUY,aCKEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.040bf7f1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Table.css';\n//import Reward from '../Reward/Reward';\nimport Draggable from 'react-draggable';\n\n\n\nclass Table extends Component {\n    state = {\n        activeDrags: 0,\n        isDragged: false,\n        rewardBox: [],\n        deleteBox: []\n    }\n\n\n    onStart = () => {\n        let newDrag = this.state.activeDrags;\n        this.setState({ activeDrags: ++newDrag, isDragged: false });\n    };\n\n    onStop = () => {\n        let newDrag = this.state.activeDrags;\n        this.setState({ activeDrags: --newDrag, isDragged: true });\n    };\n\n    addReward(r) {\n        let newRewards = this.state.rewardBox;\n        newRewards.push(r);\n        this.setState({ rewardBox: newRewards, isDragged: false });\n    }\n\n    deleteReward(r, idx) {\n        let updateRewards = this.state.rewardBox;\n        let deleted = this.state.deleteBox;\n        deleted.push(r);\n        updateRewards[idx] = '';\n\n        this.setState({ rewardBox: updateRewards,  deleteBox: deleted});\n    }\n\n    undoReward() {\n        let updateRewards = this.state.rewardBox;\n        let deleted = this.state.deleteBox;\n\n        if(updateRewards[this.state.rewardBox.length - 1] === '') {\n            updateRewards[this.state.rewardBox.length - 1] = deleted[deleted.length - 1];\n            deleted.pop();\n        } else {\n            updateRewards.pop();\n        }\n\n        this.setState({rewardBox: updateRewards, deleteBox: deleted});\n    }\n\n    handleSelect = (e) => {\n        console.log('hi')\n    }\n\n    \n\n    render() {\n        const rewards = ['R1', 'R2', 'R3', 'R4', 'R5'];\n        const categories = ['C1', 'C2', 'C3', 'C4', 'C5'];\n        const dragHandlers = {onStart: this.onStart, onStop: this.onStop};\n\n        return (\n\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-2\">\n                        Reward\n                    </div>\n                    <div className=\"col-md-10\">\n                        Categories\n                    </div>\n                </div>\n\n\n                <div className=\"row\">\n\n                    <div className={`col-md-2 ${this.state.isDragged ? 'reveal' : '' }`}>\n                        blank\n                        {rewards.map((r, idx) =>\n\n                            \n                        <div key={idx} className=\"Reward-box\" id={r} onMouseDown={() => this.addReward(r)}>\n                            {r}\n                            \n                        </div>\n                        \n\n                    )}\n\n\n                    </div>\n                    <div className={`col-md-2 overlap ${this.state.isDragged ? '' : 'reveal' }`}>\n                        {this.state.rewardBox.map((r, idx) => \n                            <Draggable key={idx} axis=\"x\" {...dragHandlers} >\n                                <div className={`Reward-box ${r === '' ? 'hide' : ''}`}>\n                                    <button className=\"deleteButton btn btn-sm btn-outline-danger\" title=\"Delete Reward\" onClick={() => this.deleteReward(r, idx)}><i className=\"fas fa-times\"></i></button>\n                                    {r}\n                                </div>\n                            </Draggable>\n                            \n                        )}\n                    </div>\n\n                    {categories.map((c, idx) =>\n                        <div className=\"col-md-2\" key={idx}>\n                            <span className=\"c-name\">{c}</span>\n                        </div>\n                    )}\n\n                </div>\n                <button className=\"btn btn-sm btn-outline-info\" title=\"Delete Reward\" onClick={() => this.undoReward()}>Undo</button>\n\n            </div >\n        );\n    }\n}\n\n\nexport default Table;","import React, { Component } from 'react';\n\n\nimport './App.css';\n\nimport Table from './components/Table/Table';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">Rewards and Categories</header>\n        <Table/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  //<React.StrictMode>\n    <App />,\n  //</React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}